/*******************************************************************************
********************************************************************************
**
** File Name
** ---------
**
** ad_obj.h
**
********************************************************************************
********************************************************************************
**
** Description
** -----------
**
** A minimalistic Anybus-CC application example.
**
** Application Data Object 0xFE (ADI) - Public interfaces
**
********************************************************************************
********************************************************************************
**                                                                            **
** COPYRIGHT NOTIFICATION (c) 2012 HMS Industrial Networks AB                 **
**                                                                            **
** This program is the property of HMS Industrial Networks AB.                **
** It has been designed to be used and modified without permission from       **
** HMS Industrial Networks AB in any application using an Anybus CompactCom   **
** module.                                                                    **
** We, HMS Industrial Networks AB, reserve the right to modify our products   **
** in line with our policy of continuous product development. The information **
** in this program is subject to updates without notice and should not be     **
** considered as a commitment by HMS Industrial Networks AB.                  **
** HMS Industrial Networks AB assumes no responsibility for any errors that   **
** may appear in this program.                                                **
**                                                                            **
********************************************************************************
********************************************************************************
*/

/*******************************************************************************
********************************************************************************
**
** Change Log
** ----------
**
** Latest modification:
** --------------------
** $Modtime: 2012-01-27 10:00:00+01:00 $
**
** Version history:
**
**    Ver 1.00     2007-12-14  MSv   First release
**
********************************************************************************
********************************************************************************
*/

#ifndef AD_OBJ_H
#define AD_OBJ_H

#include "./anybus.h"
#include "./abp.h"


/*------------------------------------------------------------------------------
** ADI entry internal status bits (AD_AdiEntryType::bStatBits)
**
** AD_STATBIT_PD_READ_MAPPED        - Entry is mapped on read process data
** AD_STATBIT_PD_WRITE_MAPPED       - Entry is mapped on write process data
** AD_STATBIT_PD_READ_LIMIT_ERROR   - If set an read process data limit error exists on this entry
**------------------------------------------------------------------------------
*/

#define AD_STATBIT_PD_READ_MAPPED      0x01
#define AD_STATBIT_PD_WRITE_MAPPED     0x02
#define AD_STATBIT_PD_READ_LIMIT_ERROR 0x04


/*******************************************************************************
**
** Type Definitions
**
********************************************************************************
*/

/*------------------------------------------------------------------------------
** ADI type property defines (min/max/default/(enum strings))
**
** AD_UINT8Type      - ABP_UINT8    property type
** AD_CHARType       - ABP_CHAR     property type
** AD_BOOL8Type      - ABP_BOOL     property type
** AD_SINT8Type      - ABP_SINT8    property type
** AD_UINT16Type     - ABP_UINT16   property type
** AD_SINT16Type     - ABP_UINT16   property type
** AD_UINT32Type     - ABP_UINT32   property type
** AD_SINT32Type     - ABP_SINT32   property type
** AD_FLOAT32Type    - ABP_FLOAT32  property type
** AD_ENUMType       - ABP_ENUM     property type
** AD_UINT64Type     - ABP_UINT64   property type
** AD_SINT64Type     - ABP_SINT64   property type
**
** AD_ENUMStrType    - Enumeration string type, used with AD_ENUMType
**                     to specify value/string mappings.
**------------------------------------------------------------------------------
*/

typedef struct AD_UINT8Type
{
   UINT8 bMinValue;
   UINT8 bMaxValue;
   UINT8 bDefaultValue;
} AD_UINT8Type, AD_CHARType, AD_BOOL8Type;

typedef struct AD_SINT8Type
{
   SINT8 bMinValue;
   SINT8 bMaxValue;
   SINT8 bDefaultValue;
} AD_SINT8Type;

typedef struct AD_UINT16Type
{
   UINT16 iMinValue;
   UINT16 iMaxValue;
   UINT16 iDefaultValue;
} AD_UINT16Type;

typedef struct AD_SINT16Type
{
   SINT16 iMinValue;
   SINT16 iMaxValue;
   SINT16 iDefaultValue;
} AD_SINT16Type;

typedef struct AD_UINT32Type
{
   UINT32 lMinValue;
   UINT32 lMaxValue;
   UINT32 lDefaultValue;
} AD_UINT32Type;

typedef struct AD_SINT32Type
{
   SINT32 lMinValue;
   SINT32 lMaxValue;
   SINT32 lDefaultValue;
} AD_SINT32Type;

typedef struct AD_FLOAT32Type
{
   FLOAT32 rMinValue;
   FLOAT32 rMaxValue;
   FLOAT32 rDefaultValue;
} AD_FLOAT32Type;

typedef struct AD_ENUMStrType
{
   UINT8  eValue;
   UINT8* abEnumStr;
} AD_ENUMStrType;

typedef struct AD_ENUMType
{
   UINT8             eMinValue;
   UINT8             eMaxValue;
   UINT8             eDefaultValue;
   UINT8             bNumOfEnumStrings;
   AD_ENUMStrType*   pasEnumStrings;
} AD_ENUMType;

#ifdef AB_ENABLE_64BIT_ADI_SUPPORT
typedef struct AD_UINT64Type
{
   UINT64 lMinValue;
   UINT64 lMaxValue;
   UINT64 lDefaultValue;
} AD_UINT64Type;

typedef struct AD_SINT64Type
{
   SINT64 lMinValue;
   SINT64 lMaxValue;
   SINT64 lDefaultValue;
} AD_SINT64Type;
#endif


/*------------------------------------------------------------------------------
** ADI entry allocation type (AD_AdiEntryType)
**
** Used to indetify an ADI instance mapping and it's properties in ad_obj.c
** see ad_obj.c (AD_AdiEntryType AD_asADIEntryList[]) allocation for example.
**------------------------------------------------------------------------------
*/

typedef struct AD_AdiEntryType
{
   UINT16   iInstance;
const   UINT8*   pabName;
   UINT8    bDataType;
   UINT8    bNumOfElements;
   UINT8    bDesc;
   union
   {
      struct
      {
         void* pxValuePtr;
         void* pxValueProps;
      } sVOID;
      struct
      {
         UINT8*         pbValuePtr;
         AD_UINT8Type*  psValueProps;
      } sUINT8, sCHAR, sBOOL;
      struct
      {
         UINT8*       pbValuePtr;
         AD_ENUMType* psValueProps;
      }sENUM;
      struct
      {
         SINT8*         pbValuePtr;
         AD_SINT8Type*  psValueProps;
      } sSINT8;
      struct
      {
         UINT16*        piValuePtr;
         AD_UINT16Type* psValueProps;
      } sUINT16 __attribute__ ((aligned(4)));
      struct
      {
         SINT16*        piValuePtr;
         AD_SINT16Type* psValueProps;
      } sSINT16 __attribute__ ((aligned(4)));
      struct
      {
         UINT32*        plValuePtr;
         AD_UINT32Type* psValueProps;
      } sUINT32 __attribute__ ((aligned(4)));
      struct
      {
         SINT32*        plValuePtr;
         AD_SINT32Type* psValueProps;
      } sSINT32 __attribute__ ((aligned(4)));
      struct
      {
         FLOAT32*        prValuePtr;
         AD_FLOAT32Type* psValueProps;
      } sFLOAT __attribute__ ((aligned(4)));
#ifdef AB_ENABLE_64BIT_ADI_SUPPORT
      struct
      {
         UINT64*        plValuePtr;
         AD_UINT64Type* psValueProps;
      } sUINT64;
      struct
      {
         SINT64*        plValuePtr;
         AD_SINT64Type* psValueProps;
      } sSINT64;
#endif

   } uData __attribute__ ((aligned(4)));

   UINT8 bStatBits; /* Internal statistic bits, see AD_STATBIT_XXX */

} AD_AdiEntryType __attribute__ ((aligned(4)));


/*******************************************************************************
**
** Public Globals
**
********************************************************************************
*/

extern UINT16 AD_iNumOfADIs;
extern UINT16 AD_iHighestInstanceNumber;
extern BOOL8  AD_fHasPdReadDataLimitError;


/*******************************************************************************
**
** Public Services Definitions
**
********************************************************************************
*/



/*------------------------------------------------------------------------------
**
** AD_Init()
**
** Performe AD Init routines
**
**------------------------------------------------------------------------------
**
** Inputs:
**    None
**
** Outputs:
**    None
**
** Usage:
**    AD_Init();
**
**------------------------------------------------------------------------------
*/

EXTFUNC void AD_Init( void );


/*------------------------------------------------------------------------------
**
** AD_GetAdiInstEntry()
**
** Called by Anybus driver to process an object request against the
** Application Data Object.
**
**------------------------------------------------------------------------------
**
** Inputs:
**    iInstance         - ADI instance number to fetch
**
** Outputs:
**    AD_AdiEntryTyp*   - Pointer to ADI entry;
**                        NULL if no entry was found
**
** Usage:
**    psAdiEntey = AD_GetAdiInstEntry( 1 );
**
**------------------------------------------------------------------------------
*/

EXTFUNC AD_AdiEntryType* AD_GetAdiInstEntry( UINT16 iInstance );


/*------------------------------------------------------------------------------
**
** AD_MapNextAdiReadArea()
**
** Called by Anybus driver to process the next ADI read area mapping.
**
**------------------------------------------------------------------------------
**
** Inputs:
**    psMsgBuffer       - Message buffer to open request to
**    fReset            - TRUE: Reset mapping sequence
**
** Outputs:
**    TRUE:             - Mapping command added to psMsgBuffer
**    FALSE:            - No command added
**
** Usage:
**    AD_MapNextAdiReadArea( &sMsgBuffer );
**
**------------------------------------------------------------------------------
*/

EXTFUNC BOOL8 AD_MapNextAdiReadArea( ABP_MsgType* psMsgBuffer, BOOL8 fReset );


/*------------------------------------------------------------------------------
**
** AD_MapNextAdiWriteArea()
**
** Called by Anybus driver to process the next ADI write area mapping.
**
**------------------------------------------------------------------------------
**
** Inputs:
**    psMsgBuffer       - Message buffer to open request to
**    fReset            - TRUE: Reset mapping sequence
**
** Outputs:
**    TRUE:             - Mapping command added to psMsgBuffer
**    FALSE:            - No command added
**
** Usage:
**    AD_MapNextAdiWriteArea( &sMsgBuffer );
**
**------------------------------------------------------------------------------
*/

EXTFUNC BOOL8 AD_MapNextAdiWriteArea( ABP_MsgType* psMsgBuffer, BOOL8 fReset );


/*------------------------------------------------------------------------------
**
** AD_ProcNextUserInitCmd()
**
** Called by Anybus driver to process the next ADI write area mapping.
**
**------------------------------------------------------------------------------
**
** Inputs:
**    psMsgBuffer       - Message buffer to open request to
**
** Outputs:
**    TRUE:             - Command added to psMsgBuffer
**    FALSE:            - No command added
**
** Usage:
**    AD_ProcNextUserInitCmd( &sMsgBuffer );
**
**------------------------------------------------------------------------------
*/

EXTFUNC BOOL8 AD_ProcNextUserInitCmd( ABP_MsgType* psMsgBuffer );


/*------------------------------------------------------------------------------
**
** AD_ProcUserInitResp()
**
** Called by Anybus driver to process an respone to an previously
** sent AD_ProcNextUserInitCmd init call.
**
**------------------------------------------------------------------------------
**
** Inputs:
**    psMsgBuffer       - Message buffer to open request to
**
** Outputs:
**    None
**
** Usage:
**    AD_ProcUserInitResp( &sMsgBuffer );
**
**------------------------------------------------------------------------------
*/

EXTFUNC void AD_ProcUserInitResp( ABP_MsgType* psMsgBuffer );


/*------------------------------------------------------------------------------
**
** AD_ProcObjectRequest()
**
** Called by Anybus driver to process an object request against the
** Application Data Object.
**
**------------------------------------------------------------------------------
**
** Inputs:
**          None        - Works on the global driver buffers
**
** Outputs:
**          None        - Works on the global driver buffers
**
** Usage:
**          AD_ProcObjectRequest();
**
**------------------------------------------------------------------------------
*/

EXTFUNC void AD_ProcObjectRequest( ABP_MsgType * psMsgBuffer );


/*------------------------------------------------------------------------------
**
** AD_GetDataTypeSize()
**
** Returns the size in bytes of an specific data type
**
**------------------------------------------------------------------------------
**
** Inputs:
**    bDataType   - Data type, see ABP_BOOL etc.
**
** Outputs:
**    UINT8       - Size in bytes
**
** Usage:
**    AD_GetDataTypeSize( ABP_BOOL );
**
**------------------------------------------------------------------------------
*/

EXTFUNC UINT8 AD_GetDataTypeSize( UINT8 bDataType );


/*------------------------------------------------------------------------------
**
** AD_GetAdiValue()
**
** Gets a specific value to an managed ADI entry.
**
**------------------------------------------------------------------------------
**
** Inputs:
**    psAdiEntry     - Pointer to ADI entry
**    pabDataPtr     - Pointer to data
**
** Outputs:
**    UINT16         - Size of get data in bytes
**
** Usage:
**    AD_GetAdiValue( psAdiEntry, abData );
**
**------------------------------------------------------------------------------
*/

EXTFUNC UINT16 AD_GetAdiValue( AD_AdiEntryType* psAdiEntry, UINT8* pabDataPtr );


/*------------------------------------------------------------------------------
**
** AD_SetAdiValue()
**
** Sets a specific value to an managed ADI entry. Function will execute
** value limit checks if setup.
**
**------------------------------------------------------------------------------
**
** Inputs:
**    psAdiEntry     - Pointer to ADI entry
**    pabDataPtr     - Pointer to data
**    fPdRead        - TRUE: Executed by Read process data from anybus
**                     FALSE: Ordinary execute
**
** Outputs:
**    SINT16         - Size of set data (-1 if error)
**                     Note: If fPdReadData == TRUE the set size
**                           will always be returned.
**
** Usage:
**    AD_SetAdiValue( psAdiEntry, abData, FALSE );
**
**------------------------------------------------------------------------------
*/

EXTFUNC SINT16 AD_SetAdiValue( AD_AdiEntryType* psAdiEntry, UINT8* pabDataPtr, BOOL8 fPdRead );


/*------------------------------------------------------------------------------
**
** AD_UpdatePdReadData()
**
** Called by Anybus driver to update AD with new read process data received
** from Anybus
**
**------------------------------------------------------------------------------
**
** Inputs:
**    pabPdDataBuf   - Pointer to data buffer
**
** Outputs:
**    None
**
** Usage:
**    AD_UpdatePdReadData( abPdWriteBuffer );
**
**------------------------------------------------------------------------------
*/

EXTFUNC void AD_UpdatePdReadData( UINT8* pabPdDataBuf );


/*------------------------------------------------------------------------------
**
** AD_UpdatePdWriteData()
**
** Called by Anybus driver to update the supplied buffer with the
** current write process data.
**
**------------------------------------------------------------------------------
**
** Inputs:
**    pabPdDataBuf   - Pointer to data buffer
**
** Outputs:
**    None
**
** Usage:
**    AD_UpdatePdWriteData( abPdWriteBuffer );
**
**------------------------------------------------------------------------------
*/

EXTFUNC void AD_UpdatePdWriteData( UINT8* pabPdDataBuf );

/*------------------------------------------------------------------------------
**
** setADI1()
**
** Manually set a value to ADI 1(UINT16)
**
**------------------------------------------------------------------------------
**
** Inputs:
**    Value to set to ADI 1
**
** Outputs:
**    None
**
** Usage:
**    setADI1(1234);
**
**------------------------------------------------------------------------------
*/
extern void setADI1(UINT16 value);
/*------------------------------------------------------------------------------
**
** setADI2()
**
** Manually set a value to ADI 2(UINT16)
**
**------------------------------------------------------------------------------
**
** Inputs:
**    Value to set to ADI 2
**
** Outputs:
**    None
**
** Usage:
**    setADI2(1234);
**
**------------------------------------------------------------------------------
*/
extern void setADI2(UINT16 value);
/*------------------------------------------------------------------------------
**
** setADI3()
**
** Manually set a value to ADI 3(UINT16)
**
**------------------------------------------------------------------------------
**
** Inputs:
**    Value to set to ADI 3
**
** Outputs:
**    None
**
** Usage:
**    setADI3(1234);
**
**------------------------------------------------------------------------------
*/
extern void setADI3(UINT8 value);
/*------------------------------------------------------------------------------
**
** setADI4()
**
** Manually set a value to ADI 4(UINT16)
**
**------------------------------------------------------------------------------
**
** Inputs:
**    Value to set to ADI 4
**
** Outputs:
**    None
**
** Usage:
**    setADI4(1234);
**
**------------------------------------------------------------------------------
*/
extern void setADI4(UINT16 value);
/*------------------------------------------------------------------------------
**
** setADI5()
**
** Manually set a value to ADI 5(UINT16)
**
**------------------------------------------------------------------------------
**
** Inputs:
**    Value to set to ADI 5
**
** Outputs:
**    None
**
** Usage:
**    setADI5(0);
**
**------------------------------------------------------------------------------
*/
extern void setADI5(BOOL8 value);
void setOutputADIs(UINT8 Status, UINT8 SUPPLY, UINT8 RETURN, UINT8 TEMP);
extern UINT16 readADI6(void);
//void setFeedbackADIs(void);
unsigned short getEIPCommand(void);
//void setWebsiteActiveData(UINT16 WebStatus, UINT16 WebSupply,UINT16 WebReturn);
void setWebsiteData(UINT8 Units,UINT16 MinFlow,UINT16 FlowOK,UINT16 LeakRate,UINT8 OverTemp,UINT8 ResponseTime,UINT8 RestartTime, UINT32 SerialNum, UINT16 GUIStatus, UINT8 Temperature2, UINT8 TempDelta);
unsigned short GetGUIControl(void);
unsigned long ReadADI(unsigned char ADInum);
<<<<<<< HEAD
void SetGUIStatus(UINT16 GUIStatus);
=======
void SetWebStatus(UINT16 WebStatus);
unsigned char *ReadIP(void);
unsigned char *ReadSM(void);
>>>>>>> EIP_Release_101
#endif  /* inclusion lock */

/*******************************************************************************
**
** End of ad_obj.h
**
********************************************************************************
*/
